/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package views;

import controllers.CuentaControlador;
import controllers.EmpresaControlador;
import java.awt.Color;
import java.util.ArrayList;
import java.util.List;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import models.Cuenta;
import models.Empresa;

/**
 *
 * @author Ever VÃ¡squez
 */
public class EstadosFinancieros extends javax.swing.JPanel {
    
    private double totalIngresos = 0.0;
    private double totalGastos = 0.0;
    private double totalCapital = 0.0;
    private double totalRetiros = 0.0;
    private double totalActivos = 0.0;
    private double totalPasivos = 0.0;

    /**
     * Creates new form EstadosFinancieros
     */
    public EstadosFinancieros() {
        initComponents();
        CargarEmpresas();
        ModeloTablas();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSeparator1 = new javax.swing.JSeparator();
        jlblTitulo = new javax.swing.JLabel();
        jlblEmpresa = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jcmbEmpresa = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtblEstadoResultados = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        jtblEstadoCapitalContable = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        jtblBalanceGeneral = new javax.swing.JTable();

        setBackground(new java.awt.Color(242, 247, 251));

        jlblTitulo.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jlblTitulo.setForeground(new java.awt.Color(0, 51, 51));
        jlblTitulo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlblTitulo.setText("ESTADOS FINANCIEROS");

        jlblEmpresa.setBackground(new java.awt.Color(0, 0, 0));
        jlblEmpresa.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jlblEmpresa.setForeground(new java.awt.Color(0, 51, 51));
        jlblEmpresa.setText("Seleccione la empresa:");

        jLabel3.setForeground(new java.awt.Color(255, 0, 0));
        jLabel3.setText("*");

        jcmbEmpresa.setForeground(new java.awt.Color(0, 51, 51));
        jcmbEmpresa.setBorder(null);
        jcmbEmpresa.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcmbEmpresaItemStateChanged(evt);
            }
        });

        jtblEstadoResultados.setBackground(new java.awt.Color(242, 247, 251));
        jtblEstadoResultados.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        jtblEstadoResultados.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "ESTADO DE RESULTADOS", "MONTO"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jtblEstadoResultados.setRowHeight(25);
        jtblEstadoResultados.setSelectionBackground(new java.awt.Color(26, 173, 220));
        jtblEstadoResultados.setSelectionForeground(new java.awt.Color(255, 255, 255));
        jtblEstadoResultados.setShowGrid(true);
        jtblEstadoResultados.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jtblEstadoResultados);
        if (jtblEstadoResultados.getColumnModel().getColumnCount() > 0) {
            jtblEstadoResultados.getColumnModel().getColumn(0).setResizable(false);
            jtblEstadoResultados.getColumnModel().getColumn(0).setPreferredWidth(150);
            jtblEstadoResultados.getColumnModel().getColumn(1).setResizable(false);
            jtblEstadoResultados.getColumnModel().getColumn(1).setPreferredWidth(10);
        }

        jtblEstadoCapitalContable.setBackground(new java.awt.Color(242, 247, 251));
        jtblEstadoCapitalContable.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        jtblEstadoCapitalContable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "ESTADO DE CAPITAL CONTABLE DEL PROPIETARIO", "MONTO"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jtblEstadoCapitalContable.setRowHeight(25);
        jtblEstadoCapitalContable.setSelectionBackground(new java.awt.Color(26, 173, 220));
        jtblEstadoCapitalContable.setSelectionForeground(new java.awt.Color(255, 255, 255));
        jtblEstadoCapitalContable.setShowGrid(true);
        jtblEstadoCapitalContable.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(jtblEstadoCapitalContable);
        if (jtblEstadoCapitalContable.getColumnModel().getColumnCount() > 0) {
            jtblEstadoCapitalContable.getColumnModel().getColumn(0).setResizable(false);
            jtblEstadoCapitalContable.getColumnModel().getColumn(0).setPreferredWidth(200);
            jtblEstadoCapitalContable.getColumnModel().getColumn(1).setResizable(false);
            jtblEstadoCapitalContable.getColumnModel().getColumn(1).setPreferredWidth(10);
        }

        jtblBalanceGeneral.setBackground(new java.awt.Color(242, 247, 251));
        jtblBalanceGeneral.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        jtblBalanceGeneral.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "BALANCE GENERAL", "MONTO"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jtblBalanceGeneral.setRowHeight(25);
        jtblBalanceGeneral.setSelectionBackground(new java.awt.Color(26, 173, 220));
        jtblBalanceGeneral.setSelectionForeground(new java.awt.Color(255, 255, 255));
        jtblBalanceGeneral.setShowGrid(true);
        jtblBalanceGeneral.getTableHeader().setReorderingAllowed(false);
        jScrollPane3.setViewportView(jtblBalanceGeneral);
        if (jtblBalanceGeneral.getColumnModel().getColumnCount() > 0) {
            jtblBalanceGeneral.getColumnModel().getColumn(0).setResizable(false);
            jtblBalanceGeneral.getColumnModel().getColumn(0).setPreferredWidth(200);
            jtblBalanceGeneral.getColumnModel().getColumn(1).setResizable(false);
            jtblBalanceGeneral.getColumnModel().getColumn(1).setPreferredWidth(30);
        }

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jlblTitulo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 140, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 344, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 353, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 715, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(190, 190, 190))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jlblEmpresa)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel3))
                    .addComponent(jSeparator1, javax.swing.GroupLayout.DEFAULT_SIZE, 527, Short.MAX_VALUE)
                    .addComponent(jcmbEmpresa, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(258, 258, 258))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addComponent(jlblTitulo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jlblEmpresa))
                .addGap(3, 3, 3)
                .addComponent(jcmbEmpresa, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 272, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 341, Short.MAX_VALUE)
                .addGap(17, 17, 17))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jcmbEmpresaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcmbEmpresaItemStateChanged
        // TODO add your handling code here:
        if (evt.getStateChange() == java.awt.event.ItemEvent.SELECTED) {
            if (!jcmbEmpresa.getSelectedItem().equals("-- SELECCIONAR EMPRESA --")) {
                totalIngresos = 0.0;
                totalGastos = 0.0;
                totalCapital = 0.0;
                totalRetiros = 0.0;
                totalActivos = 0.0;
                totalPasivos = 0.0;
                CargarEstadosFinancieros();
            } else {
                LimpiarTablas();
            }
        }
    }//GEN-LAST:event_jcmbEmpresaItemStateChanged


    private void CargarEmpresas() {
        List<Empresa> lstEmpresas = EmpresaControlador.Instancia().GetListaEmpresas();
        jcmbEmpresa.addItem("-- SELECCIONAR EMPRESA --");
        for (Empresa empresa : lstEmpresas) {
            jcmbEmpresa.addItem(empresa);
        }
    }
    
    private void CargarEstadosFinancieros() {
        // Busca la empresa seleccionada para obtener su catÃ¡logo de cuentas completo
        Empresa empresaSeleccionada = (Empresa) jcmbEmpresa.getSelectedItem();
        
        List<Cuenta> lstCuentas = CuentaControlador.Instancia().GetListaCuentasPorEmpresa(empresaSeleccionada.getId());
        CargarEstadoDeResultados(lstCuentas);
        CargarEstadoDeCapitalContable(lstCuentas);
        CargarBalanzaGeneral(lstCuentas);
    }
    
    private void CargarEstadoDeResultados(List<Cuenta> lstCuentas) {
        DefaultTableModel modeloEstadoResultados = new DefaultTableModel();
        modeloEstadoResultados = (DefaultTableModel)jtblEstadoResultados.getModel();
        modeloEstadoResultados.setRowCount(0);//Limpia todas los registros de la tabla (indicando que no quiere ninguna fila)
        
        for (Cuenta cuenta : lstCuentas) {
            if (cuenta.getTipo().equals("Ingresos")) {
                totalIngresos += cuenta.getSaldo().doubleValue();
                modeloEstadoResultados.addRow(new Object[]{cuenta.getNombre(), "$" + cuenta.getSaldo()});
            }
        }
        modeloEstadoResultados.addRow(new Object[]{"TOTAL INGRESOS", "$" + totalIngresos});
        modeloEstadoResultados.addRow(new Object[]{"", ""});
        
        for (Cuenta cuenta : lstCuentas) {
            if (cuenta.getTipo().equals("Gastos")) {
                totalGastos += cuenta.getSaldo().doubleValue();
                modeloEstadoResultados.addRow(new Object[]{cuenta.getNombre(), "$" + cuenta.getSaldo()});
            }
        }
        modeloEstadoResultados.addRow(new Object[]{"TOTAL GASTOS", "$" + totalGastos});
        modeloEstadoResultados.addRow(new Object[]{"", ""});
        modeloEstadoResultados.addRow(new Object[]{"UTILIDAD NETA", "$" + (totalIngresos - totalGastos)});
    }
    
    private void CargarEstadoDeCapitalContable(List<Cuenta> lstCuentas) {
        DefaultTableModel modeloEstadoCapital = new DefaultTableModel();
        modeloEstadoCapital = (DefaultTableModel)jtblEstadoCapitalContable.getModel();
        modeloEstadoCapital.setRowCount(0);//Limpia todas los registros de la tabla (indicando que no quiere ninguna fila)
        
        for (Cuenta cuenta : lstCuentas) {
            if (cuenta.getTipo().equals("Capital")) {
                totalCapital += cuenta.getSaldo().doubleValue();
                modeloEstadoCapital.addRow(new Object[]{cuenta.getNombre(), "$" + cuenta.getSaldo()});
            }
        }
        modeloEstadoCapital.addRow(new Object[]{"Utilidad neta", "$" + (totalIngresos - totalGastos)});
        for (Cuenta cuenta : lstCuentas) {
            if (cuenta.getTipo().equals("Retiros")) {
                totalRetiros += cuenta.getSaldo().doubleValue();
                modeloEstadoCapital.addRow(new Object[]{cuenta.getNombre(), "$" + cuenta.getSaldo()});
            }
        }
        modeloEstadoCapital.addRow(new Object[]{"", ""});
        double capitalFinal = totalCapital + (totalIngresos - totalGastos) - totalRetiros;
        modeloEstadoCapital.addRow(new Object[]{"CAPITAL FINAL", "$" + capitalFinal});
    }
    
    private void CargarBalanzaGeneral(List<Cuenta> lstCuentas) {
        DefaultTableModel modeloBalance = new DefaultTableModel();
        modeloBalance = (DefaultTableModel)jtblBalanceGeneral.getModel();
        modeloBalance.setRowCount(0);//Limpia todas los registros de la tabla (indicando que no quiere ninguna fila)
        
        for (Cuenta cuenta : lstCuentas) {
            if (cuenta.getTipo().equals("Activo Normal")) {
                totalActivos += cuenta.getSaldo().doubleValue();
                modeloBalance.addRow(new Object[]{cuenta.getNombre(), "$" + cuenta.getSaldo()});
            }
        }
        modeloBalance.addRow(new Object[]{"TOTAL ACTIVOS", "$" + totalActivos});
        modeloBalance.addRow(new Object[]{"", ""});
        for (Cuenta cuenta : lstCuentas) {
            if (cuenta.getTipo().equals("Contra-Cuenta de Activo") || cuenta.getTipo().equals("Pasivo")) {
                totalPasivos += cuenta.getSaldo().doubleValue();
                modeloBalance.addRow(new Object[]{cuenta.getNombre(), "$" + cuenta.getSaldo()});
            }
        }
        modeloBalance.addRow(new Object[]{"TOTAL PASIVOS", "$" + totalPasivos});
        modeloBalance.addRow(new Object[]{"", ""});
        double capitalFinal = totalCapital + (totalIngresos - totalGastos) - totalRetiros;
        modeloBalance.addRow(new Object[]{"CAPITAL FINAL", "$" + capitalFinal});
        modeloBalance.addRow(new Object[]{"", ""});
        modeloBalance.addRow(new Object[]{"TOTAL PASIVO + CAPITAL", "$" + (capitalFinal + totalPasivos)});
    }
    
    private void ModeloTablas() {
         // DiseÃ±o de la tabla => Crea un renderer para personalizar el encabezado
        DefaultTableCellRenderer headerRenderer = new DefaultTableCellRenderer();
        headerRenderer.setBackground(new java.awt.Color(0,51,51)); // Cambia el color de fondo del encabezado al del diseÃ±o principal new java.awt.Color(0,51,51)
        headerRenderer.setForeground(Color.WHITE); // Cambia el color de la fuente del encabezado

        // Asigna el renderer a cada columna del encabezado
        for (int i = 0; i < jtblBalanceGeneral.getColumnModel().getColumnCount(); i++) {
            jtblBalanceGeneral.getColumnModel().getColumn(i).setHeaderRenderer(headerRenderer);
        }
        for (int i = 0; i < jtblEstadoCapitalContable.getColumnModel().getColumnCount(); i++) {
            jtblEstadoCapitalContable.getColumnModel().getColumn(i).setHeaderRenderer(headerRenderer);
        }
        for (int i = 0; i < jtblEstadoResultados.getColumnModel().getColumnCount(); i++) {
            jtblEstadoResultados.getColumnModel().getColumn(i).setHeaderRenderer(headerRenderer);
        }
        
        // Cambia el fondo de la tabla
        jtblBalanceGeneral.setBackground(new java.awt.Color(242,247,251)); // Fondo de la tabla (celdas)
        jtblEstadoCapitalContable.setBackground(new java.awt.Color(242,247,251)); // Fondo de la tabla (celdas)
        jtblEstadoResultados.setBackground(new java.awt.Color(242,247,251)); // Fondo de la tabla (celdas)
        // Cambia el fondo del Ã¡rea vacÃ­a de la tabla
        jtblBalanceGeneral.setFillsViewportHeight(true);
        jtblBalanceGeneral.getParent().setBackground(new java.awt.Color(242,247,251)); // Fondo del viewport
        jtblEstadoCapitalContable.setFillsViewportHeight(true);
        jtblEstadoCapitalContable.getParent().setBackground(new java.awt.Color(242,247,251)); // Fondo del viewport
        jtblEstadoResultados.setFillsViewportHeight(true);
        jtblEstadoResultados.getParent().setBackground(new java.awt.Color(242,247,251)); // Fondo del viewport
    }
    
    private void LimpiarTablas() {
        DefaultTableModel modeloEstadoResultados = new DefaultTableModel();
        modeloEstadoResultados = (DefaultTableModel)jtblEstadoResultados.getModel();
        modeloEstadoResultados.setRowCount(0);//Limpia todas los registros de la tabla (indicando que no quiere ninguna fila)
        
        DefaultTableModel modeloEstadoCapital = new DefaultTableModel();
        modeloEstadoCapital = (DefaultTableModel)jtblEstadoCapitalContable.getModel();
        modeloEstadoCapital.setRowCount(0);//Limpia todas los registros de la tabla (indicando que no quiere ninguna fila)
        
        DefaultTableModel modeloBalance = new DefaultTableModel();
        modeloBalance = (DefaultTableModel)jtblBalanceGeneral.getModel();
        modeloBalance.setRowCount(0);//Limpia todas los registros de la tabla (indicando que no quiere ninguna fila)
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JComboBox jcmbEmpresa;
    private javax.swing.JLabel jlblEmpresa;
    private javax.swing.JLabel jlblTitulo;
    private javax.swing.JTable jtblBalanceGeneral;
    private javax.swing.JTable jtblEstadoCapitalContable;
    private javax.swing.JTable jtblEstadoResultados;
    // End of variables declaration//GEN-END:variables
}
