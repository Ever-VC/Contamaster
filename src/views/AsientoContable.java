/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package views;

import controllers.AsientoControlador;
import controllers.CuentaControlador;
import controllers.DetalleAsientoControlador;
import controllers.EmpresaControlador;
import controllers.MovimientoControlador;
import controllers.UsuarioControlador;
import java.math.BigDecimal;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import models.Asiento;
import models.Cuenta;
import models.DetalleAsiento;
import models.Empresa;
import models.Movimiento;
import support.UsuarioCache;

/**
 *
 * @author ever_vc
 */
public class AsientoContable extends javax.swing.JPanel {
    
    private DefaultListModel _modeloLista = new DefaultListModel();
    private List<Cuenta> lstCuentasSegunTipo = null;
    private List<Movimiento> _lstMovimientos = new ArrayList();
    private int _filaSeleccionada = -1;

    /**
     * Creates new form AsientoContable
     */
    public AsientoContable() {
        initComponents();
        CargarEmpresas();
        jlstCuentas.setModel(_modeloLista);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jlblTitulo = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jDateChooser1 = new com.toedter.calendar.JDateChooser();
        jlblFecha = new javax.swing.JLabel();
        jcmbTipoCuenta = new javax.swing.JComboBox<>();
        jcmbEmpresa = new javax.swing.JComboBox();
        jtxtDescripcion = new javax.swing.JTextField();
        jpnlCuentas = new javax.swing.JPanel();
        jtxtNombreCuenta = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        jlstCuentas = new javax.swing.JList();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtblMovimientos = new javax.swing.JTable();
        jbtnGuardar = new javax.swing.JButton();
        jtxtTotalDebe = new javax.swing.JTextField();
        jtxtTotalHaber = new javax.swing.JTextField();
        jbtnEliminarMovimiento = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));
        setPreferredSize(new java.awt.Dimension(1051, 835));
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });

        jlblTitulo.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jlblTitulo.setForeground(new java.awt.Color(0, 0, 0));
        jlblTitulo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlblTitulo.setText("ASIENTOS CONTABLES");

        jlblFecha.setBackground(new java.awt.Color(0, 0, 0));
        jlblFecha.setForeground(new java.awt.Color(0, 0, 0));
        jlblFecha.setText("Fecha de movimiento:");

        jcmbTipoCuenta.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-- SELECCIONAR TIPO --", "Todas las cuentas", "Activo", "Pasivo", "Capital", "Ingresos", "Gastos", "Retiros" }));
        jcmbTipoCuenta.setBorder(javax.swing.BorderFactory.createTitledBorder("Filtrar por tipo de cuenta:"));
        jcmbTipoCuenta.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcmbTipoCuentaItemStateChanged(evt);
            }
        });

        jcmbEmpresa.setBorder(javax.swing.BorderFactory.createTitledBorder("Empresa:"));
        jcmbEmpresa.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcmbEmpresaItemStateChanged(evt);
            }
        });

        jtxtDescripcion.setBorder(javax.swing.BorderFactory.createTitledBorder("DescripciÃ³n:"));

        jpnlCuentas.setBackground(new java.awt.Color(255, 255, 255));
        jpnlCuentas.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jtxtNombreCuenta.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jtxtNombreCuentaKeyReleased(evt);
            }
        });

        jlstCuentas.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jlstCuentasValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(jlstCuentas);

        javax.swing.GroupLayout jpnlCuentasLayout = new javax.swing.GroupLayout(jpnlCuentas);
        jpnlCuentas.setLayout(jpnlCuentasLayout);
        jpnlCuentasLayout.setHorizontalGroup(
            jpnlCuentasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpnlCuentasLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpnlCuentasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jtxtNombreCuenta)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 297, Short.MAX_VALUE))
                .addContainerGap())
        );
        jpnlCuentasLayout.setVerticalGroup(
            jpnlCuentasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpnlCuentasLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jtxtNombreCuenta, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 654, Short.MAX_VALUE)
                .addContainerGap())
        );

        jtblMovimientos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "CODIGO", "FECHA", "DESCRIPCION", "DEBE", "HABER"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jtblMovimientos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtblMovimientosMouseClicked(evt);
            }
        });
        jtblMovimientos.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jtblMovimientosPropertyChange(evt);
            }
        });
        jScrollPane1.setViewportView(jtblMovimientos);
        if (jtblMovimientos.getColumnModel().getColumnCount() > 0) {
            jtblMovimientos.getColumnModel().getColumn(0).setResizable(false);
            jtblMovimientos.getColumnModel().getColumn(0).setPreferredWidth(10);
            jtblMovimientos.getColumnModel().getColumn(1).setResizable(false);
            jtblMovimientos.getColumnModel().getColumn(1).setPreferredWidth(50);
            jtblMovimientos.getColumnModel().getColumn(2).setResizable(false);
            jtblMovimientos.getColumnModel().getColumn(2).setPreferredWidth(250);
            jtblMovimientos.getColumnModel().getColumn(3).setResizable(false);
            jtblMovimientos.getColumnModel().getColumn(3).setPreferredWidth(50);
            jtblMovimientos.getColumnModel().getColumn(4).setResizable(false);
            jtblMovimientos.getColumnModel().getColumn(4).setPreferredWidth(50);
        }

        jbtnGuardar.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jbtnGuardar.setText("CREAR ASIENTO");
        jbtnGuardar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jbtnGuardar.setEnabled(false);
        jbtnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnGuardarActionPerformed(evt);
            }
        });

        jtxtTotalDebe.setBorder(javax.swing.BorderFactory.createTitledBorder("TOTAL DEBE:"));

        jtxtTotalHaber.setBorder(javax.swing.BorderFactory.createTitledBorder("TOTAL HABER:"));

        jbtnEliminarMovimiento.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jbtnEliminarMovimiento.setText("ELIMINAR MOVIMIENTO");
        jbtnEliminarMovimiento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnEliminarMovimientoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(258, 258, 258)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 527, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(19, 19, 19))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jlblTitulo)
                        .addGap(323, 323, 323))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 699, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jbtnGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jbtnEliminarMovimiento, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(43, 43, 43)
                                .addComponent(jtxtTotalDebe, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jtxtTotalHaber, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(85, 85, 85)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jtxtDescripcion, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 535, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(jcmbEmpresa, javax.swing.GroupLayout.PREFERRED_SIZE, 535, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(layout.createSequentialGroup()
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(jlblFecha)
                                                .addComponent(jDateChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGap(119, 119, 119)
                                            .addComponent(jcmbTipoCuenta, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jpnlCuentas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jlblTitulo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jlblFecha)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jDateChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jcmbTipoCuenta, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jcmbEmpresa, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jtxtDescripcion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(22, 22, 22)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jtxtTotalDebe, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jtxtTotalHaber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jbtnGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jbtnEliminarMovimiento, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jpnlCuentas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(51, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jbtnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnGuardarActionPerformed
        // TODO add your handling code here:
        /**
        * Validaciones...
        */
        /*
        String descripcion = JOptionPane.showInputDialog(AsientoContable.this, "Ingrese la descripciÃ³n del asiento:");
        if (descripcion == null || descripcion.trim().isEmpty()) {
            return;
        }
        Map<String, Double> totales = CalcularTotales();
        Asiento nuevoAsiento = CrearAsiento(totales.get("total_debe"), totales.get("total_debe"), descripcion);
        
        int response = JOptionPane.showConfirmDialog(
            AsientoContable.this,
            "Â¿EstÃ¡s seguro de que deseas registrar el asiento cobtable? Es posible que no lo puedas modificar en el futuro, por lo que debes estar seguro que la informaciÃ³n estÃ© correcta.",
            "ATENCIÃN:",
            JOptionPane.YES_NO_OPTION,
            JOptionPane.WARNING_MESSAGE
        );
        
        if (response == JOptionPane.YES_OPTION) {
            //Guardar todo
            RegistrarMovimientos();
            RegistrarAsiento(nuevoAsiento);
        }*/
        
        int response = JOptionPane.showConfirmDialog(
            AsientoContable.this,
            "Â¿EstÃ¡s seguro de que deseas registrar el asiento cobtable? Es posible que no lo puedas modificar en el futuro, por lo que debes estar seguro que la informaciÃ³n estÃ© correcta.",
            "ATENCIÃN:",
            JOptionPane.YES_NO_OPTION,
            JOptionPane.WARNING_MESSAGE
        );
        
        if (response == JOptionPane.YES_OPTION) {
            // Almacena los totales (estan en los JTextField) y la descripcion
            String descripcion = jtxtDescripcion.getText();
            BigDecimal totalDebe = new BigDecimal(jtxtTotalDebe.getText());
            BigDecimal totalHaber = new BigDecimal(jtxtTotalHaber.getText());
            // Crea el asiento contable
            Asiento nuevoAsiento = CrearAsiento(totalDebe, totalHaber, descripcion);
            
            //Guardar todo
            RegistrarMovimientos();
            RegistrarAsiento(nuevoAsiento);
            RegistrarDetalleAsiento(nuevoAsiento);
        }
    }//GEN-LAST:event_jbtnGuardarActionPerformed

    private void jcmbTipoCuentaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcmbTipoCuentaItemStateChanged
        // TODO add your handling code here:
        if (evt.getStateChange() == java.awt.event.ItemEvent.SELECTED) {
            String tipoSeleccionado = (String) jcmbTipoCuenta.getSelectedItem();
            if (!jcmbEmpresa.getSelectedItem().equals("-- SELECCIONAR EMPRESA --")) {
                CargarCuentas();
            }
        }
    }//GEN-LAST:event_jcmbTipoCuentaItemStateChanged

    private void jtxtNombreCuentaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtxtNombreCuentaKeyReleased
        // TODO add your handling code here:
        if (jcmbEmpresa.getSelectedItem() != "-- SELECCIONAR EMPRESA --" && lstCuentasSegunTipo != null) {
            _modeloLista.removeAllElements();// Limpia el modelo de la lista (elimina todos los elementos que hayan)
            if ("".equals(jtxtNombreCuenta.getText())) {
                for (Cuenta cuenta : lstCuentasSegunTipo) {
                    _modeloLista.addElement(cuenta);
                }
            } else {
                String nombreCuentaBuscada = jtxtNombreCuenta.getText();
                for (Cuenta cuenta : lstCuentasSegunTipo) {
                    if (cuenta.getNombre().toLowerCase().contains(nombreCuentaBuscada.toLowerCase())) {
                        _modeloLista.addElement(cuenta);
                    }
                }
            }
        }
    }//GEN-LAST:event_jtxtNombreCuentaKeyReleased

    private void jcmbEmpresaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcmbEmpresaItemStateChanged
        // TODO add your handling code here:
        if (evt.getStateChange() == java.awt.event.ItemEvent.SELECTED) {
            if (!jcmbEmpresa.getSelectedItem().equals("-- SELECCIONAR EMPRESA --")) {
                CargarCuentas();
            } else {
                // Limpia el modelo de la lista (elimina todos los elementos que haya)
                _modeloLista.removeAllElements();
            }
        }
    }//GEN-LAST:event_jcmbEmpresaItemStateChanged

    private void jbtnEliminarMovimientoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnEliminarMovimientoActionPerformed
        // TODO add your handling code here:
        if (_filaSeleccionada != -1) { // verifica que haya una fila seleccionada
            _lstMovimientos.remove(_filaSeleccionada);
            CaragarMovimientos();
        }
    }//GEN-LAST:event_jbtnEliminarMovimientoActionPerformed

    private void jlstCuentasValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jlstCuentasValueChanged
        // TODO add your handling code here:
        if (!evt.getValueIsAdjusting()) { // Valida que el usuario ya haya completado su selecciÃ³n (y asÃ­ no manejar multiples eventos)
            Cuenta cuentaSeleccionada = (Cuenta) jlstCuentas.getSelectedValue();
            if (cuentaSeleccionada != null) {
                AlmacenarNuevoMovimiento(cuentaSeleccionada);
            }
        }
    }//GEN-LAST:event_jlstCuentasValueChanged

    private void jtblMovimientosPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jtblMovimientosPropertyChange
        // TODO add your handling code here:
        if ("tableCellEditor".equals(evt.getPropertyName())) {
            int fila = jtblMovimientos.getEditingRow();
            int columna = jtblMovimientos.getEditingColumn();
            
            if (columna == 3 || columna == 4) {
                // Acceder al objeto correspondiente de la lista
                Movimiento movimientoModificado = _lstMovimientos.get(fila);
                
                // Almacena los nuevos valores de la tabla
                String textoDebe = jtblMovimientos.getValueAt(fila, 3).toString();
                BigDecimal debe = new BigDecimal(textoDebe);
                movimientoModificado.setDebe(debe);
                String textoHaber = jtblMovimientos.getValueAt(fila, 4).toString();
                BigDecimal haber = new BigDecimal(textoHaber);
                movimientoModificado.setHaber(haber);
                CaragarMovimientos(); // Actualiza la tabla y hace el calculo del debe y haber
            }
        }
    }//GEN-LAST:event_jtblMovimientosPropertyChange

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        // TODO add your handling code here:
        jtblMovimientos.clearSelection();
        jlstCuentas.clearSelection();
    }//GEN-LAST:event_formMouseClicked

    private void jtblMovimientosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtblMovimientosMouseClicked
        // TODO add your handling code here:
        _filaSeleccionada = jtblMovimientos.getSelectedRow();
    }//GEN-LAST:event_jtblMovimientosMouseClicked

    private void CargarEmpresas() {
        List<Empresa> lstEmpresas = EmpresaControlador.Instancia().GetListaEmpresas();
        jcmbEmpresa.addItem("-- SELECCIONAR EMPRESA --");
        for (Empresa empresa : lstEmpresas) {
            jcmbEmpresa.addItem(empresa);
        }
    }
    
    private void CaragarMovimientos() {
        if (!_lstMovimientos.isEmpty()) {
            DefaultTableModel modelo = new DefaultTableModel();
            modelo = (DefaultTableModel)jtblMovimientos.getModel();
            modelo.setRowCount(0);//Limpia todas los registros de la tabla (indicando que no quiere ninguna fila)
            
            double total_debe = 0.00;
            double total_haber = 0.00;
            
            for (Movimiento movimiento : _lstMovimientos) {
                total_debe += movimiento.getDebe().doubleValue();
                total_haber += movimiento.getHaber().doubleValue();
                Date fecha = movimiento.getFecha();
                SimpleDateFormat formatoCorto = new SimpleDateFormat("dd/MM/yyyy");
                String fechaFormateada = formatoCorto.format(fecha);
                modelo.addRow(new Object[]{movimiento.getIdCuentaFk().getCodigo(), fechaFormateada, movimiento.getDescripcion(), movimiento.getDebe(), movimiento.getHaber()});
            }
            
            if (total_debe == total_haber) {
                jbtnGuardar.setEnabled(true);
            } else {
                jbtnGuardar.setEnabled(false);
            }
            
            jtxtTotalDebe.setText(String.valueOf(total_debe));
            jtxtTotalHaber.setText(String.valueOf(total_haber));
        } else { // si se han eliminado todos los movmientos y la lista esta vacÃ­a, debe mostrar vacÃ­a tambiÃ©n la tabla
            DefaultTableModel modelo = new DefaultTableModel();
            modelo = (DefaultTableModel)jtblMovimientos.getModel();
            modelo.setRowCount(0);//Limpia todas los registros de la tabla (indicando que no quiere ninguna fila)
        }
    }
    
    private void CargarCuentas() {
        // Busca la empresa seleccionada para obtener su catÃ¡logo de cuentas completo
        Empresa empresaSeleccionada = (Empresa) jcmbEmpresa.getSelectedItem();

        // Limpia el modelo de la lista (elimina todos los elementos que haya)
        _modeloLista.removeAllElements();
        String tipoCuentaSeleccionada = (String) jcmbTipoCuenta.getSelectedItem();

        // Verifica si el JComboBox estÃ¡ vacÃ­o (Cosa que no deberÃ­a pasar xd), tiene "Todas las cuentas" o la opciÃ³n por defecto
        if (tipoCuentaSeleccionada == null || tipoCuentaSeleccionada.equals("Todas las cuentas") || tipoCuentaSeleccionada.equals("-- SELECCIONAR TIPO --")) {
            CargarTodasLasCuentas(empresaSeleccionada);
        } else {
            CargarCuentasPorTipo(empresaSeleccionada, tipoCuentaSeleccionada);
        }
    }

    
    private void CargarCuentasPorTipo(Empresa empresaSeleccionada, String tipoCuenta) {
        lstCuentasSegunTipo = CuentaControlador.Instancia().GetListaCuentasPorPorEmpresaYtipo(empresaSeleccionada.getId(), tipoCuenta);
        for (Cuenta cuenta : lstCuentasSegunTipo) {
            _modeloLista.addElement(cuenta);
        }
    }
    
    private void CargarTodasLasCuentas(Empresa empresaSeleccionada) {
        lstCuentasSegunTipo = CuentaControlador.Instancia().GetListaCuentasPorEmpresa(empresaSeleccionada.getId());
        for (Cuenta cuenta : lstCuentasSegunTipo) {
            _modeloLista.addElement(cuenta);
        }
    }
    
    private void LimpiarTodo() {
        jDateChooser1.setDate(null);
        jcmbTipoCuenta.setSelectedIndex(0);
        jcmbEmpresa.setSelectedIndex(0);
        jtxtDescripcion.setText("");
        _modeloLista.removeAllElements();// Limpia el modelo de la lista (elimina todos los elementos que hayan)
    }
    
    private void AlmacenarNuevoMovimiento(Cuenta cuentaSeleccionada) {
        Movimiento nuevoMovimiento = new Movimiento();
        nuevoMovimiento.setFecha(jDateChooser1.getDate());
        nuevoMovimiento.setIdCuentaFk(cuentaSeleccionada);
        nuevoMovimiento.setDescripcion(cuentaSeleccionada.getNombre());
        BigDecimal debe = new BigDecimal("0.00");
        nuevoMovimiento.setDebe(debe);
        BigDecimal haber = new BigDecimal("0.00");
        nuevoMovimiento.setHaber(haber);
        
        _lstMovimientos.add(nuevoMovimiento);
        CaragarMovimientos();
        jlstCuentas.clearSelection();
        //LimpiarTodo();
    }
    
    private Map<String, Double> CalcularTotales() {
        double total_debe = 0.00;
        double total_haber = 0.00;
        for (Movimiento movimiento : _lstMovimientos) {
            total_debe += movimiento.getDebe().doubleValue();
            total_haber += movimiento.getHaber().doubleValue();
            //MovimientoControlador.Instancia().CrearMovimiento(movimiento);
        }
        Map<String, Double> totales = new HashMap<>();
        totales.put("total_debe", total_debe);
        totales.put("total_haber", total_haber);
        return totales;
    }
    
    private Asiento CrearAsiento(BigDecimal totalDebe, BigDecimal totalHaber, String descripcion) {
        Asiento nuevoAsiento = new Asiento();
        nuevoAsiento.setFecha(_lstMovimientos.getFirst().getFecha());
        nuevoAsiento.setDescripcion(descripcion);
        nuevoAsiento.setTotalDebe(totalDebe);
        nuevoAsiento.setTotalHaber(totalHaber);
        nuevoAsiento.setIdUsuarioFk(UsuarioControlador.Instancia().GetUsuarioPorId(UsuarioCache.Id));
        return nuevoAsiento;
    }
    
    private void RegistrarMovimientos() {
        for (Movimiento movimiento : _lstMovimientos) {
            MovimientoControlador.Instancia().CrearMovimiento(movimiento);
        }
    }
    
    private void RegistrarAsiento (Asiento nuevoAsiento) {
        AsientoControlador.Instancia().CrearAsiento(nuevoAsiento);
    }
    
    private void RegistrarDetalleAsiento(Asiento asiento) {
        for (Movimiento movimiento : _lstMovimientos) {
            DetalleAsiento nuevoDetalleAsiento = new DetalleAsiento();
            nuevoDetalleAsiento.setIdAsientoFk(asiento);
            nuevoDetalleAsiento.setIdMovimientoFk(movimiento);
            DetalleAsientoControlador.Instancia().CrearDetalleMovimiento(nuevoDetalleAsiento);
        }
        
    }
            
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.toedter.calendar.JDateChooser jDateChooser1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JButton jbtnEliminarMovimiento;
    private javax.swing.JButton jbtnGuardar;
    private javax.swing.JComboBox jcmbEmpresa;
    private javax.swing.JComboBox<String> jcmbTipoCuenta;
    private javax.swing.JLabel jlblFecha;
    private javax.swing.JLabel jlblTitulo;
    private javax.swing.JList jlstCuentas;
    private javax.swing.JPanel jpnlCuentas;
    private javax.swing.JTable jtblMovimientos;
    private javax.swing.JTextField jtxtDescripcion;
    private javax.swing.JTextField jtxtNombreCuenta;
    private javax.swing.JTextField jtxtTotalDebe;
    private javax.swing.JTextField jtxtTotalHaber;
    // End of variables declaration//GEN-END:variables
}
