/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package views;

import controllers.CuentaControlador;
import controllers.EmpresaControlador;
import controllers.MayorControlador;
import controllers.MovimientoControlador;
import java.math.BigDecimal;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.Month;
import java.time.ZoneId;
import java.util.Date;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import models.Cuenta;
import models.Empresa;
import models.Mayor;
import models.Movimiento;

/**
 *
 * @author ever_vc
 */
public class LibroMayor extends javax.swing.JPanel {
    
    private int _idCuenta = -1;
    private Principal _frmPrincipal;
    private Empresa _empresaSeleccionada = null;
    private Month mes = null; // Almacena el mes que se desea mayorizar

    /**
     * Creates new form LibroMayor
     */
    public LibroMayor() {
        initComponents();
        CargarEmpresas();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSeparator1 = new javax.swing.JSeparator();
        jlblTitulo = new javax.swing.JLabel();
        jcmbEmpresa = new javax.swing.JComboBox();
        jbtnMayorizar = new javax.swing.JButton();
        jbtnCuentaT = new javax.swing.JButton();
        jbtnBalanzaComprobacion = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtblCuentas = new javax.swing.JTable();
        jcmbMesMayorizar = new javax.swing.JComboBox<>();

        setBackground(new java.awt.Color(255, 255, 255));

        jlblTitulo.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jlblTitulo.setForeground(new java.awt.Color(0, 0, 0));
        jlblTitulo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlblTitulo.setText("LIBRO MAYOR");

        jcmbEmpresa.setBorder(javax.swing.BorderFactory.createTitledBorder("Empresa:"));
        jcmbEmpresa.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcmbEmpresaItemStateChanged(evt);
            }
        });

        jbtnMayorizar.setText("MAYORIZAR CUENTAS");
        jbtnMayorizar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jbtnMayorizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnMayorizarActionPerformed(evt);
            }
        });

        jbtnCuentaT.setText("VER ESTADO DE CUENTA");
        jbtnCuentaT.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jbtnCuentaT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnCuentaTActionPerformed(evt);
            }
        });

        jbtnBalanzaComprobacion.setText("GENERAR BALACE DE COMPROBACION");
        jbtnBalanzaComprobacion.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jbtnBalanzaComprobacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnBalanzaComprobacionActionPerformed(evt);
            }
        });

        jtblCuentas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "ID", "CODIGO", "NOMBRE", "TIPO", "SALDO", "ULTIMA MAYORIZACION"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jtblCuentas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtblCuentasMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jtblCuentas);
        if (jtblCuentas.getColumnModel().getColumnCount() > 0) {
            jtblCuentas.getColumnModel().getColumn(0).setResizable(false);
            jtblCuentas.getColumnModel().getColumn(0).setPreferredWidth(10);
            jtblCuentas.getColumnModel().getColumn(1).setResizable(false);
            jtblCuentas.getColumnModel().getColumn(1).setPreferredWidth(50);
            jtblCuentas.getColumnModel().getColumn(2).setResizable(false);
            jtblCuentas.getColumnModel().getColumn(2).setPreferredWidth(250);
            jtblCuentas.getColumnModel().getColumn(3).setResizable(false);
            jtblCuentas.getColumnModel().getColumn(3).setPreferredWidth(50);
            jtblCuentas.getColumnModel().getColumn(4).setResizable(false);
            jtblCuentas.getColumnModel().getColumn(4).setPreferredWidth(50);
            jtblCuentas.getColumnModel().getColumn(5).setResizable(false);
            jtblCuentas.getColumnModel().getColumn(5).setPreferredWidth(150);
        }

        jcmbMesMayorizar.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--- SELECCIONE EL MES ---", "Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio", "Julio", "Agosto", "Septiembre", "Octubre", "Noviembre", "Diciembre" }));
        jcmbMesMayorizar.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcmbMesMayorizarItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(156, 156, 156)
                        .addComponent(jbtnCuentaT, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jbtnBalanzaComprobacion, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(236, 236, 236)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jcmbMesMayorizar, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jbtnMayorizar, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 527, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jlblTitulo)
                                    .addGap(138, 138, 138))
                                .addComponent(jcmbEmpresa, javax.swing.GroupLayout.PREFERRED_SIZE, 527, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(78, 78, 78)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 823, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(156, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addComponent(jlblTitulo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jcmbEmpresa, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jcmbMesMayorizar, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbtnMayorizar, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 409, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbtnCuentaT, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbtnBalanzaComprobacion, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jcmbEmpresaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcmbEmpresaItemStateChanged
        // TODO add your handling code here:
        if (evt.getStateChange() == java.awt.event.ItemEvent.SELECTED) {
            if (!jcmbEmpresa.getSelectedItem().equals("-- SELECCIONAR EMPRESA --")) {
                CargarCuentas();
            } else {
                _empresaSeleccionada = null;
            }
        }
    }//GEN-LAST:event_jcmbEmpresaItemStateChanged

    private void jtblCuentasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtblCuentasMouseClicked
        // TODO add your handling code here:
        _idCuenta = Integer.parseInt(jtblCuentas.getValueAt(jtblCuentas.getSelectedRow(), 0).toString());
        //CargarDatosDeCuentaSeleccionada();
    }//GEN-LAST:event_jtblCuentasMouseClicked

    private void jbtnMayorizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnMayorizarActionPerformed
        // TODO add your handling code here:
        System.out.println("Empresa" + _empresaSeleccionada.getNombre());
        System.out.println("Mes: " + mes);
        if (_empresaSeleccionada != null && mes != null) {
            List<Cuenta> lstCuentas = CuentaControlador.Instancia().GetListaCuentasPorEmpresa(_empresaSeleccionada.getId());
        
            for (Cuenta cuenta : lstCuentas) {
                Mayorizar(cuenta);
            }
        }
    }//GEN-LAST:event_jbtnMayorizarActionPerformed

    private void jcmbMesMayorizarItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcmbMesMayorizarItemStateChanged
        // TODO add your handling code here:
        if (evt.getStateChange() == java.awt.event.ItemEvent.SELECTED) {
            if (!jcmbMesMayorizar.getSelectedItem().equals("--- SELECCIONE EL MES ---")) {
                switch (jcmbMesMayorizar.getSelectedItem().toString()) {
                    case "Enero": mes = Month.JANUARY; break;
                    case "Febrero": mes = Month.FEBRUARY; break;
                    case "Marzo": mes = Month.MARCH; break;
                    case "Abril": mes = Month.APRIL; break;
                    case "Mayo": mes = Month.MAY; break;
                    case "Junio": mes = Month.JUNE; break;
                    case "Julio": mes = Month.JULY; break;
                    case "Agosto": mes = Month.AUGUST; break;
                    case "Septiembre": mes = Month.SEPTEMBER; break;
                    case "Octubre": mes = Month.OCTOBER; break;
                    case "Noviembre": mes = Month.NOVEMBER; break;
                    case "Diciembre": mes = Month.DECEMBER; break;
                    default: return;
                }
            } else {
                mes = null;
            }
        }
    }//GEN-LAST:event_jcmbMesMayorizarItemStateChanged

    private void jbtnCuentaTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnCuentaTActionPerformed
        // TODO add your handling code here:
        if (_idCuenta != -1) {
            Cuenta cuenta = CuentaControlador.Instancia().GetCuentaPorId(_idCuenta);
            _frmPrincipal.AbrirSubPanel(new CuentaT(cuenta));
        } else {
            JOptionPane.showMessageDialog(null, "POR FAVOR SELECCIONE LA CUAL DE LA CUAL DESEA VISUALIZAR EL ESQUEMA DE MAYOR.","ERROR:", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jbtnCuentaTActionPerformed

    private void jbtnBalanzaComprobacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnBalanzaComprobacionActionPerformed
        // TODO add your handling code here:
        // Debe abrir el JPanel
    }//GEN-LAST:event_jbtnBalanzaComprobacionActionPerformed

    public void SetFormularioPrincipal(Principal frmPrincipal) {
        this._frmPrincipal = frmPrincipal;
    }
    
    private void CargarCuentas() {
        _empresaSeleccionada = (Empresa) jcmbEmpresa.getSelectedItem();
        
        DefaultTableModel modelo = new DefaultTableModel();
        modelo = (DefaultTableModel)jtblCuentas.getModel();
        modelo.setRowCount(0);//Limpia todas los registros de la tabla (indicando que no quiere ninguna fila)
        
        List<Cuenta> lstCuentas = CuentaControlador.Instancia().GetListaCuentasPorEmpresa(_empresaSeleccionada.getId());
        
        for (Cuenta cuenta : lstCuentas) {
            // Muestra la ultima vez de mayorizacion
            List<Mayor> lstRegistrosDeCuentaEnELMayor = MayorControlador.Instancia().GetListaRegistrosAlMayorPorCuenta(cuenta);
            String fechaFormateada = "Sin mayorizar (nueva)";
            if (lstRegistrosDeCuentaEnELMayor.size() > 0) {
                Date fecha = lstRegistrosDeCuentaEnELMayor.getFirst().getFechaFin();
                SimpleDateFormat formatoCorto = new SimpleDateFormat("dd/MM/yyyy");
                fechaFormateada = formatoCorto.format(fecha);
            }
            modelo.addRow(new Object[]{cuenta.getId(), cuenta.getCodigo(), cuenta.getNombre(), cuenta.getTipo(), cuenta.getSaldo(), fechaFormateada});
        }
    }
    
    private void CargarEmpresas() {
        List<Empresa> lstEmpresas = EmpresaControlador.Instancia().GetListaEmpresas();
        jcmbEmpresa.addItem("-- SELECCIONAR EMPRESA --");
        for (Empresa empresa : lstEmpresas) {
            jcmbEmpresa.addItem(empresa);
        }
    }
    
    private void Mayorizar(Cuenta cuenta) {
        // Calcula la fecha de inicio y fin para la mayorizacion del mes seleccionado
        int annio = LocalDate.now().getYear();
        LocalDate inicio = LocalDate.of(annio, mes, 1);
        LocalDate fin= inicio.withDayOfMonth(inicio.lengthOfMonth());
        Date fechaInicio = Date.from(inicio.atStartOfDay(ZoneId.systemDefault()).toInstant());
        Date fechaFin = Date.from(fin.atStartOfDay(ZoneId.systemDefault()).toInstant());

        // Obtiene la lista de registros en las que se haya un movimiento de la cuenta iniciando desde el 01 del mes indicado hasta el final del mismo
        List<Movimiento> lstMovimientos = MovimientoControlador.Instancia().GetMovimientosPorCuentaYFechaInicioYFin(fechaInicio, fechaFin, cuenta);

        // Almacenan el total del debe y haber para posteriormente realizar la respectiva diferencia
        double totalDebe = 0.00;
        double totalHaber = 0.00;

        for (Movimiento movimiento : lstMovimientos) {
            totalDebe += movimiento.getDebe().doubleValue();
            totalHaber += movimiento.getHaber().doubleValue();
        }
        
        double saldoFinal = 0.00;
        
        // Realiza la diferencia segun el tipo de la cuenta que se está procesando
        String tipo = cuenta.getTipo();
        switch(tipo) {
            case "Activo Normal":
                saldoFinal = cuenta.getSaldo().doubleValue() + totalDebe - totalHaber;
                break;
            case "Pasivo":
                saldoFinal = cuenta.getSaldo().doubleValue() + totalHaber - totalDebe;
                break;
            case "Contra-Cuenta de Activo":
                saldoFinal = cuenta.getSaldo().doubleValue() + totalHaber - totalDebe;
                break;
            case "Capital":
                saldoFinal = cuenta.getSaldo().doubleValue() + totalHaber - totalDebe;
                break;
            case "Ingresos":
                saldoFinal = cuenta.getSaldo().doubleValue() + totalHaber - totalDebe;
                break;
            case "Gastos":
                saldoFinal = cuenta.getSaldo().doubleValue() + totalDebe - totalHaber;
                break;
            case "Retiros":
                saldoFinal = cuenta.getSaldo().doubleValue() + totalDebe - totalHaber;
                break;
        }
        RegistrarMayorizacion(cuenta, fechaInicio, fechaFin, totalDebe, totalHaber, saldoFinal);
        ActualizarCuenta(cuenta, saldoFinal);
    }
    
    private void ActualizarCuenta(Cuenta cuenta, double nuevoSaldo) {
        BigDecimal saldoActualizado = BigDecimal.valueOf(nuevoSaldo);
        cuenta.setSaldo(saldoActualizado);
        CuentaControlador.Instancia().ActualizarCuenta(cuenta);
    }
    
    private void RegistrarMayorizacion(Cuenta cuenta, Date fechaInicio, Date fechaFin, double debe, double haber, double saldoFinal) {
        BigDecimal totalDebe = BigDecimal.valueOf(debe);
        BigDecimal totalHaber = BigDecimal.valueOf(haber);
        BigDecimal saldo = BigDecimal.valueOf(saldoFinal);
        Mayor nuevoMayor = new Mayor();
        nuevoMayor.setFechaInicio(fechaInicio);
        nuevoMayor.setFechaFin(fechaFin);
        nuevoMayor.setTotalDebe(totalDebe);
        nuevoMayor.setTotalHaber(totalHaber);
        nuevoMayor.setSaldo(saldo);
        nuevoMayor.setSaldoAnterior(cuenta.getSaldo());
        nuevoMayor.setIdCuentaFk(cuenta);
        
        MayorControlador.Instancia().CrearRegistroDelMayor(nuevoMayor);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JButton jbtnBalanzaComprobacion;
    private javax.swing.JButton jbtnCuentaT;
    private javax.swing.JButton jbtnMayorizar;
    private javax.swing.JComboBox jcmbEmpresa;
    private javax.swing.JComboBox<String> jcmbMesMayorizar;
    private javax.swing.JLabel jlblTitulo;
    private javax.swing.JTable jtblCuentas;
    // End of variables declaration//GEN-END:variables
}
