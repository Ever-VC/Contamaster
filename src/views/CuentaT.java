/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package views;

import controllers.MayorControlador;
import controllers.MovimientoControlador;
import java.math.BigDecimal;
import java.util.List;
import javax.swing.table.DefaultTableModel;
import models.Cuenta;
import models.Mayor;
import models.Movimiento;

/**
 *
 * @author ever_vc
 */
public class CuentaT extends javax.swing.JPanel {
    
    private Cuenta _cuenta = null;

    /**
     * Creates new form CuentaT
     */
    public CuentaT(Cuenta cuenta) {
        initComponents();
        this._cuenta = cuenta;
        this.jlblNombreYTipoCuenta.setText(cuenta.getNombre().toUpperCase() + " - " + cuenta.getTipo().toUpperCase());
        this.jlblSaldo.setText( this.jlblSaldo.getText() + cuenta.getSaldo());
        CargarMovimientos();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSeparator1 = new javax.swing.JSeparator();
        jlblTitulo = new javax.swing.JLabel();
        jlblNombreYTipoCuenta = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtblCuentaT = new javax.swing.JTable();
        jlblSaldo = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));

        jlblTitulo.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jlblTitulo.setForeground(new java.awt.Color(0, 0, 0));
        jlblTitulo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlblTitulo.setText("ESQUEMA DE MAYOR");

        jlblNombreYTipoCuenta.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jlblNombreYTipoCuenta.setForeground(new java.awt.Color(0, 0, 0));
        jlblNombreYTipoCuenta.setText("NOMBRE DE LA CUENTA - TIPO DE CUENTA");

        jtblCuentaT.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Codigo", "DEBE", "HABER", "Codigo"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jtblCuentaT);
        if (jtblCuentaT.getColumnModel().getColumnCount() > 0) {
            jtblCuentaT.getColumnModel().getColumn(0).setResizable(false);
            jtblCuentaT.getColumnModel().getColumn(1).setResizable(false);
            jtblCuentaT.getColumnModel().getColumn(2).setResizable(false);
            jtblCuentaT.getColumnModel().getColumn(3).setResizable(false);
        }

        jlblSaldo.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jlblSaldo.setForeground(new java.awt.Color(0, 0, 0));
        jlblSaldo.setText("SALDO: $");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(283, 283, 283)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 527, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(263, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jSeparator2)
                    .addComponent(jlblSaldo, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1))
                .addGap(286, 286, 286))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jlblTitulo)
                        .addGap(327, 327, 327))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jlblNombreYTipoCuenta)
                        .addGap(365, 365, 365))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addComponent(jlblTitulo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(50, 50, 50)
                .addComponent(jlblNombreYTipoCuenta)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jlblSaldo)
                .addContainerGap(316, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents


    private void CargarMovimientos() {
        // Obtiene el ultimo registro de mayorizaci√≥n de la cuenta (es decir el saldo que tiene)
        List<Mayor> lstMayorizaciones = MayorControlador.Instancia().GetListaRegistrosAlMayorPorCuenta(_cuenta);
        
        DefaultTableModel modelo = new DefaultTableModel();
        modelo = (DefaultTableModel)jtblCuentaT.getModel();
        modelo.setRowCount(0);//Limpia todas los registros de la tabla (indicando que no quiere ninguna fila)
        
        String saldoAnterior = "Saldo Inicial: $";
        if (lstMayorizaciones.size() > 0) {
            Mayor ultimoRegistroMayorizacion = lstMayorizaciones.getLast();
            saldoAnterior = "Saldo anterior:";
            
            List<Movimiento> lstMovimientos = MovimientoControlador.Instancia().GetMovimientosPorCuentaYFechaInicioYFin(ultimoRegistroMayorizacion.getFechaInicio(), ultimoRegistroMayorizacion.getFechaFin(), _cuenta);
            
            //Movimiento primerMovimiento = lstMovimientos.getFirst();
            
            switch(_cuenta.getTipo()) {
                case "Activo Normal":
                    CargarTipoActivo(modelo, saldoAnterior, ultimoRegistroMayorizacion.getSaldoAnterior(), lstMovimientos);
                    break;
                case "Pasivo":
                    CargarTipoPasivo(modelo, saldoAnterior, ultimoRegistroMayorizacion.getSaldoAnterior(), lstMovimientos);
                    break;
                case "Contra-Cuenta de Activo":
                    CargarTipoPasivo(modelo, saldoAnterior, ultimoRegistroMayorizacion.getSaldoAnterior(), lstMovimientos);
                    break;
                case "Capital":
                    CargarTipoPasivo(modelo, saldoAnterior, ultimoRegistroMayorizacion.getSaldoAnterior(), lstMovimientos);
                    break;
                case "Ingresos":
                    CargarTipoPasivo(modelo, saldoAnterior, ultimoRegistroMayorizacion.getSaldoAnterior(), lstMovimientos);
                    break;
                case "Gastos":
                    CargarTipoActivo(modelo, saldoAnterior, ultimoRegistroMayorizacion.getSaldoAnterior(), lstMovimientos);
                    break;
                case "Retiros":
                    CargarTipoActivo(modelo, saldoAnterior, ultimoRegistroMayorizacion.getSaldoAnterior(), lstMovimientos);
                    break;
            }
            
            
        } else {
            // Si no hay movimientos, mostrar solo el saldo inicial y los totales
            System.out.println("Hola Mundo!");
            modelo.addRow(new Object[]{saldoAnterior, "$" + _cuenta.getSaldo(), "", ""});
            modelo.addRow(new Object[]{"Total Debe", "$" + _cuenta.getSaldo(), "$0.00", "Total Haber"});
        }      
        
    }
    
    private void CargarTipoActivo(DefaultTableModel modelo, String mensaje, BigDecimal saldoAnterior, List<Movimiento> lstMovimientos) {
        BigDecimal totalDebe = BigDecimal.ZERO;
        BigDecimal totalHaber = BigDecimal.ZERO;
        Movimiento primerMovimientoConValor = null;

        // Buscar el primer movimiento con valor en el haber
        for (Movimiento movimiento : lstMovimientos) {
            if (movimiento.getHaber() != null && movimiento.getHaber().compareTo(BigDecimal.ZERO) > 0) {
                primerMovimientoConValor = movimiento;
                break; // Salimos del bucle en cuanto encontramos el primer movimiento con valor
            }
        }

        // Verificar si hay movimientos
        if (lstMovimientos.size() > 0) {
            totalDebe = totalDebe.add(saldoAnterior);
            // Agregar la primera fila con el saldo inicial a la izquierda y el primer movimiento con valor a la derecha
            if (primerMovimientoConValor != null) {
                totalHaber = totalHaber.add(primerMovimientoConValor.getHaber());
                modelo.addRow(new Object[]{mensaje, "$" + saldoAnterior, "$" + primerMovimientoConValor.getHaber(), primerMovimientoConValor.getId()});
                // Eliminar el primer movimiento con valor para que no se repita en la tabla
                lstMovimientos.remove(primerMovimientoConValor);
            } else {
                // En caso de no haber ning√∫n movimiento con valor, dejamos la columna de Haber en blanco
                modelo.addRow(new Object[]{mensaje, "$" + saldoAnterior, "", ""});
            }

            // Iterar sobre los movimientos restantes
            for (Movimiento movimiento : lstMovimientos) {
                BigDecimal debe = movimiento.getDebe();
                BigDecimal haber = movimiento.getHaber();

                // Verificar en qu√© columna se va a agregar el valor (Debe o Haber)
                if (debe != null && debe.compareTo(BigDecimal.ZERO) > 0) {
                    // Si hay valor en el Debe, lo apilamos a la columna del Debe
                    modelo.addRow(new Object[]{movimiento.getId(), "$" + debe, "", ""});
                    totalDebe = totalDebe.add(debe); // Sumar al total del Debe
                } 
                if (haber != null && haber.compareTo(BigDecimal.ZERO) > 0) {
                    // Si hay valor en el Haber, lo apilamos a la columna del Haber
                    modelo.addRow(new Object[]{"", "", "$" + haber, movimiento.getId()});
                    totalHaber = totalHaber.add(haber); // Sumar al total del Haber
                }
            }

            // Agregar la fila final con los totales del Debe y Haber
            modelo.addRow(new Object[]{"Total Debe", "$" + totalDebe, "$" + totalHaber, "Total Haber"});

        } else {
            // Si no hay movimientos, mostrar solo el saldo inicial y los totales ACA NO DEBERIA LLEGAR EN NINGUN MOMENTO DEL FLUJO
            modelo.addRow(new Object[]{mensaje, "$" + _cuenta.getSaldo(), "", _cuenta.getCodigo()});
            modelo.addRow(new Object[]{"Total Debe", "$" + _cuenta.getSaldo(), "$0.00", "Total Haber"});
        }
    }
    
    private void CargarTipoPasivo(DefaultTableModel modelo, String mensaje, BigDecimal saldoAnterior, List<Movimiento> lstMovimientos) {
        BigDecimal totalDebe = BigDecimal.ZERO;
        BigDecimal totalHaber = BigDecimal.ZERO;
        Movimiento primerMovimientoConValor = null;

        // Buscar el primer movimiento con valor en el haber
        for (Movimiento movimiento : lstMovimientos) {
            if (movimiento.getDebe() != null && movimiento.getDebe().compareTo(BigDecimal.ZERO) > 0) {
                primerMovimientoConValor = movimiento;
                break; // Salimos del bucle en cuanto encontramos el primer movimiento con valor
            }
        }

        // Verificar si hay movimientos
        if (lstMovimientos.size() > 0) {
            totalHaber = totalHaber.add(saldoAnterior);
            // Agregar la primera fila con el saldo inicial a la izquierda y el primer movimiento con valor a la derecha
            if (primerMovimientoConValor != null) {
                totalDebe = totalDebe.add(primerMovimientoConValor.getDebe());
                modelo.addRow(new Object[]{primerMovimientoConValor.getId(), "$" + primerMovimientoConValor.getDebe(), "$" + saldoAnterior, mensaje});
                // Eliminar el primer movimiento con valor para que no se repita en la tabla
                lstMovimientos.remove(primerMovimientoConValor);
            } else {
                // En caso de no haber ning√∫n movimiento con valor, dejamos la columna de Haber en blanco
                modelo.addRow(new Object[]{"", "", "$" + saldoAnterior, mensaje});
            }

            // Iterar sobre los movimientos restantes
            for (Movimiento movimiento : lstMovimientos) {
                BigDecimal debe = movimiento.getDebe();
                BigDecimal haber = movimiento.getHaber();

                // Verificar en qu√© columna se va a agregar el valor (Debe o Haber)
                if (debe != null && debe.compareTo(BigDecimal.ZERO) > 0) {
                    // Si hay valor en el Debe, lo apilamos a la columna del Debe
                    modelo.addRow(new Object[]{movimiento.getId(), "$" + debe, "", ""});
                    totalDebe = totalDebe.add(debe); // Sumar al total del Debe
                } 
                if (haber != null && haber.compareTo(BigDecimal.ZERO) > 0) {
                    // Si hay valor en el Haber, lo apilamos a la columna del Haber
                    modelo.addRow(new Object[]{"", "", "$" + haber, movimiento.getId()});
                    totalHaber = totalHaber.add(haber); // Sumar al total del Haber
                }
            }

            // Agregar la fila final con los totales del Debe y Haber
            modelo.addRow(new Object[]{"Total Debe", "$" + totalDebe, "$" + totalHaber, "Total Haber"});

        } else {
            // Si no hay movimientos, mostrar solo el saldo inicial y los totales ACA NO DEBERIA LLEGAR EN NINGUN MOMENTO DEL FLUJO
            modelo.addRow(new Object[]{mensaje, "$" + _cuenta.getSaldo(), "", _cuenta.getCodigo()});
            modelo.addRow(new Object[]{"Total Debe", "$" + _cuenta.getSaldo(), "$0.00", "Total Haber"});
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JLabel jlblNombreYTipoCuenta;
    private javax.swing.JLabel jlblSaldo;
    private javax.swing.JLabel jlblTitulo;
    private javax.swing.JTable jtblCuentaT;
    // End of variables declaration//GEN-END:variables
}
